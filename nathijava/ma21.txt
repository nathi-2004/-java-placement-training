public class SearchInsertPosition {
    public static void main(String[] args) {
        // Test case
        int[] nums = {1, 3, 5, 6};
        int target = 5;

        // Loop through the array to find the insertion index
        int index = -1;  // Variable to store the result
        
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                index = i;
                break;
            } else if (nums[i] > target) {
                index = i;
                break;
            }
        }
        
        // If no index was found, set it to the end of the array
        if (index == -1) {
            index = nums.length;
        }

        // Output the result
        System.out.println(index);  // Output: 2
    }
}
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
public class Solution {
    
    // Define the searchInsert method
    public int searchInsert(int[] nums, int target) {
        int index = -1;  
        
        // Loop through the array to find the insertion index
        for (int i = 0; i < nums.length; i++) {
            // If we find the target, return the index
            if (nums[i] == target) {
                index = i;
                break;
            } 
            // If the target is smaller than the current element, return the index
            else if (nums[i] > target) {
                index = i;
                break;
            }
        }
        
        // If no index was found, set it to the end of the array
        if (index == -1) {
            index = nums.length;
        }
        
        return index;
    }
    
    // Main method for testing
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test case 1
        int[] nums1 = {1, 3, 5, 6};
        int target1 = 5;
        System.out.println(solution.searchInsert(nums1, target1));  // Output: 2
        
        // Test case 2
        int[] nums2 = {1, 3, 5, 6};
        int target2 = 2;
        System.out.println(solution.searchInsert(nums2, target2));  // Output: 1
        
        // Test case 3
        int[] nums3 = {1, 3, 5, 6};
        int target3 = 7;
        System.out.println(solution.searchInsert(nums3, target3));  // Output: 4
    }
}
........................................................
public class Solution {
    
    public static int searchInsert(int[] nums, int target) {
        int index = -1;  
        
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                index = i;
                break;
            } 
            else if (nums[i] > target) {
                index = i;
                break;
            }
        }
        
        if (index == -1) {
            index = nums.length;
        }
        
        return index;
    }
    
    public static void main(String[] args) {
        int[] nums1 = {1, 3, 5, 6};
        int target1 = 5;
        System.out.println(searchInsert(nums1, target1));  

        int[] nums2 = {1, 3, 5, 6};
        int target2 = 2;
        System.out.println(searchInsert(nums2, target2));  

        int[] nums3 = {1, 3, 5, 6};
        int target3 = 7;
        System.out.println(searchInsert(nums3, target3));  
    }
}
.....................................................................................................................
public class Solution {

    public int[] searchRange(int[] nums, int target) {
        int[] result = {-1, -1};  // Default return value if target is not found

        // Find the first occurrence of the target
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
                result[0] = i;  // First occurrence of target
                break;  // Stop searching once we find the first occurrence
            }
        }

        // If the target was not found, return [-1, -1]
        if (result[0] == -1) {
            return result;
        }

        // Find the last occurrence of the target (start searching from the end)
        for (int i = nums.length - 1; i >= result[0]; i--) {
            if (nums[i] == target) {
                result[1] = i;  // Last occurrence of target
                break;  // Stop searching once we find the last occurrence
            }
        }

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Test case 1
        int[] nums1 = {5, 7, 7, 8, 8, 10};
        int target1 = 8;
        int[] result1 = solution.searchRange(nums1, target1);
        System.out.println("Output: [" + result1[0] + ", " + result1[1] + "]");  // Output: [3, 4]

        // Test case 2
        int[] nums2 = {5, 7, 7, 8, 8, 10};
        int target2 = 6;
        int[] result2 = solution.searchRange(nums2, target2);
        System.out.println("Output: [" + result2[0] + ", " + result2[1] + "]");  // Output: [-1, -1]

        // Test case 3
        int[] nums3 = {};
        int target3 = 0;
        int[] result3 = solution.searchRange(nums3, target3);
        System.out.println("Output: [" + result3[0] + ", " + result3[1] + "]");  // Output: [-1, -1]
    }
}
..............................................................................................................
public class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        
        // Initialize the first row and first column as 1 because there's only one way to get there
        for (int i = 0; i < m; i++) {
            dp[i][0] = 1;
        }
        for (int j = 0; j < n; j++) {
            dp[0][j] = 1;
        }
        
        // Fill the rest of the dp table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        // The number of unique paths to the bottom-right corner
        return dp[m-1][n-1];
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Test case 1
        System.out.println(solution.uniquePaths(3, 7));  // Output: 28
        
        // Test case 2
        System.out.println(solution.uniquePaths(3, 2));  // Output: 3
    }
}
.....................................................................................................
class Solution {
    public int uniquePaths(int m, int n)
     {
        int[][] arr = new int[m][n];
        for (int i = 0; i < m; i++) 
        {
            arr[i][0] = 1;
        }
        for (int j = 0; j < n; j++) 
        {
            arr[0][j] = 1;
        }
        for (int i = 1; i < m; i++)
         {
            for (int j = 1; j < n; j++)
             {
               arr[i][j] = arr[i - 1][j] + arr[i][j - 1]; 

            }
        }

        return arr[m - 1][n - 1]; 
    }
}..........................................................

class Main {
    public static int uniquePaths(int m, int n) {
        int[][] arr = new int[m][n];
        for (int i = 0; i < m; i++) {
            arr[i][0] = 1;
        }
        for (int j = 0; j < n; j++) {
            arr[0][j] = 1;
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                arr[i][j] = arr[i - 1][j] + arr[i][j - 1];
            }
        }

        return arr[m - 1][n - 1];
    }

    public static void main(String[] args) {
        System.out.println(uniquePaths(3, 7));
        System.out.println(uniquePaths(3, 2));
    }
}

.......................................................................................................